{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","navbarStyle","background","mode","className","style","href","title","type","id","aboutText","onClick","toggleMode","role","htmlFor","btnText","defaultProps","TextForm","useState","text","setText","heading","value","toggleStyle","onChange","extract","target","rows","placeholder","upperText","toUpperCase","showAlert","lowerText","toLowerCase","removeSpace","replace","trim","newText","letter","copyText","navigator","clipboard","writeText","split","filter","element","length","Alert","alert","height","word","lower","charAt","slice","capitalize","msg","prototype","PropTypes","string","func","protoTypes","App","setMode","setBtnText","setAlert","message","setTimeout","backgroundColor","color","border","transition","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2bb6613c.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types' // impts\r\n// import { Link } from 'react-router-dom'; //* Router Specific Stuff */\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n    let navbarStyle = {\r\n        background: props.mode === \"dark\" ? \"linear-gradient(6deg, #00378a, hsl(263 90% 51% / 1))\" : \"white\"\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} p-2`} style={navbarStyle}>\r\n                <div className=\"container-fluid\">\r\n                    {/* Router Specific Stuff  */}\r\n                    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n                    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                    <button className=\"navbar-toggler mb-1\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                {/* Router Specific Stuff  */}\r\n                                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                {/* Router Specific Stuff  */}\r\n                                {/* <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link> */}\r\n                                <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n                            </li>\r\n                        </ul>\r\n                        {/* Toggle Mode Btn */}\r\n                        <div className={`form-check form-switch d-flex mb-3 mb-lg-0 text-${props.mode === \"light\" ? \"dark\" : \"light\"}`} >\r\n                            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"modeSwitch\" />\r\n                            <label className=\"form-check-label mx-2\" htmlFor=\"modeSwitch\" >{props.btnText}</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Specifies the values for props:\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired, //.isRequired give error when return undefined value\r\n    aboutText: PropTypes.string.isRequired,\r\n    mode: PropTypes.string,\r\n    toggleMode: PropTypes.func,\r\n    btnText: PropTypes.string\r\n};\r\n\r\n// Specifies the default values for props:\r\nNavbar.defaultProps = {\r\n    title: 'Title-Text',\r\n    aboutText: 'About'\r\n}","import './TextForm.css'; //Importing Custom CSS\r\nimport React, { useState } from 'react' // Importing useState form React\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        let upperText = text.toUpperCase();\r\n        setText(upperText)\r\n        props.showAlert(\"Converted to UpperCase\", \"success\")\r\n    }\r\n    const handleOnChange = (extract) => {\r\n        setText(extract.target.value)\r\n    }\r\n    const handleLwcase = () => {\r\n        let lowerText = text.toLowerCase();\r\n        setText(lowerText)\r\n        props.showAlert(\"Converted to LowerCase\", \"success\")\r\n    }\r\n    const handleCapCase = () => {\r\n        let newText = text.replace(/(^\\w{1})|(\\s+\\w{1})/g, letter => letter.toUpperCase()) // This line credit goes to freecode.org\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Capitalize\", \"success\")\r\n        // console.log(newText);\r\n    }\r\n    const handleCopyToClipboard = () => {\r\n        let copyText = text;\r\n        navigator.clipboard.writeText(copyText)\r\n        setText(copyText)\r\n        props.showAlert(\"Text is copied to clipboard\", \"success\")\r\n\r\n    }\r\n    const handleRemoveExSpace = () => {\r\n        let removeSpace = text.replace(/\\s+/g, ' ').trim();\r\n        setText(removeSpace)\r\n        props.showAlert(\"Extra space is remove\", \"success\")\r\n        // let removeSpace = text.split(/[ ]+/);\r\n        // setText(removeSpace.join(\"\"))\r\n    }\r\n    const handleClearAll = () => {\r\n        setText('')\r\n        props.showAlert(\"Text Cleared\", \"danger\")\r\n    }\r\n    // const [text, setText] = useState(\"Enter Your Text Here\"); // use this line for development\r\n    const [text, setText] = useState(\"\"); // use this line for deployment\r\n\r\n    // text = 'this is text'    // Wrong way to change state\r\n    // setText('this is text')  // Correct way to change state \r\n    return (\r\n        <>\r\n            <div className={`container my-3 text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>\r\n                <h1 className=\"mb-4\">{props.heading}</h1>\r\n                <div className=\"mb-4\">\r\n                    <textarea className=\"form-control \" value={text} style={props.toggleStyle} id=\"mybox\" onChange={handleOnChange} rows=\"8\" placeholder=\"Enter Your Text Here\"></textarea>\r\n                    {/* <textarea className=\"form-control\" value={text} id=\"mybox\" onChange={handleOnChange} rows=\"8\" placeholder=\"Enter Your Text Here\"></textarea> */}\r\n                </div>\r\n            </div>\r\n            <div className=\"container btn-container\">\r\n                <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n                <button className=\"btn btn-primary\" onClick={handleLwcase}>Convert to Lowercase</button>\r\n                <button className=\"btn btn-primary\" onClick={handleRemoveExSpace}>Remove Spaces</button>\r\n                <button className=\"btn btn-primary\" onClick={handleCapCase}>Convert to Capitalize</button>\r\n                <button className=\"btn btn-primary\" onClick={handleCopyToClipboard}>Copy To Clipboard</button>\r\n                {/* { 1 Liner Code} */}\r\n                {/* <button className=\"btn btn-primary\" onClick={() => navigator.clipboard.writeText(text)}>Copy To Clipboard</button> */}\r\n                <button className=\"btn btn-primary\" onClick={handleClearAll}>Clear All</button>\r\n\r\n            </div>\r\n            <div className={`container my-3 text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>\r\n                <h2 className=\"my-4 mb-3\">Text Summary</h2>\r\n                <div><span className=\"highlight\">{text.split(\" \").filter((element) => { return element.length !== 0 }).length}</span> words <span className=\"highlight\">{text.length}</span> characters</div>\r\n                <div><span className=\"highlight\"> {0.008 * text.split(\" \").filter((element) => { return element.length !== 0 }).length}</span> Minutes Read</div>\r\n                <h2 className=\"my-3\">Live Preview</h2>\r\n                <div className=\"p-3 mb-5\" style={props.toggleStyle} id=\"resultBox\">{text.length > 0 ? text : \"Nothing to preview\"}</div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n// Type-Check\r\nTextForm.prototype = {\r\n    heading: PropTypes.string,\r\n    showAlert: PropTypes.func\r\n}\r\n\r\n// Default Props \r\nTextForm.defaultProps = {\r\n    heading: \"TextUtlits\"\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Alert(props) {\r\n    // Function to capitalize First letter\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase()\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n    }\r\n    return (props.alert && <div className={`d-flex align-items-center alert alert-${props.alert.type} alert-dismissible fade show`} style={{ height: \"40px\" }} id=\"alert\" role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}:&nbsp; </strong>{props.alert.msg}\r\n    </div>\r\n    )\r\n}\r\n\r\n// Specifies the values for props:\r\nAlert.protoTypes = {\r\n    alert: PropTypes.func\r\n}\r\n","import './App.css';\nimport React, { useState } from 'react'\n// import About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm'\nimport Alert from './Components/Alert';\n// Router Specific Stuff\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');  // Wheather Mode is Dark or Light\n  const [btnText, setBtnText] = useState(\"Enable Dark Mode\"); // Text to change Mode Dark or Light\n  const [alert, setAlert] = useState(null);   //  Alert\n  // Function to set Alert \n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1100);\n  }\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\")\n      setBtnText(\"Disable Dark Mode\")\n      showAlert(\"Dark Mode Is Enable\", \"success\") // Alert\n      document.body.style.backgroundColor = \"hsl(216 98% 11% / 1)\"\n      // document.body.style.background = 'linear-gradient(90deg, rgb(0, 0, 71), rgb(50, 6, 121))' // DO NOT DELETE THIS \n      document.title = \"TextUlits - Dark Mode\"\n    }\n    else {\n      setMode('light')\n      setBtnText(\"Enable Dark Mode\")\n      showAlert(\" Light Mode Is Enable\", \"success\") // Alert\n      document.body.style.backgroundColor = \"white\"\n      document.title = \"TextUlits - Light Mode\"\n    }\n  }\n  // Style for dark theme\n  let toggleStyle = {\n    backgroundColor: mode === \"dark\" ? \"hsl(216 100% 20% / 1)\" : \"white\",\n    color: mode === \"dark\" ? \"white\" : \"black\",\n    border: mode === \"dark\" ? \"1px solid white\" : \"1px solid hsl(0deg 0% 0% / 66%)\",\n    transition: \"none\"\n  }\n  return (\n    <>\n      {/* Router Specific Stuff */}\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" mode={mode} toggleMode={toggleMode} btnText={btnText} />\n      <div className=\"container py-3\" style={{ height: \"50px\" }}>\n        <Alert alert={alert} />\n      </div>\n      <TextForm heading=\"Enter the text here to analyze\" mode={mode} toggleStyle={toggleStyle} showAlert={showAlert} />\n      {/* Without exact in route\n        /user --> Component 1\n        /user/home --> Component 2 */}\n      {/* <Switch>\n        <Route exact path=\"/about\">\n          <About aboutText=\"About TextUtils\" mode={mode} toggleStyle={toggleStyle} />\n        </Route>\n        <Route exact path=\"/\">\n          <TextForm heading=\"Enter the text here to analyze\" mode={mode} toggleStyle={toggleStyle} showAlert={showAlert} />\n        </Route>\n      </Switch> */}\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}